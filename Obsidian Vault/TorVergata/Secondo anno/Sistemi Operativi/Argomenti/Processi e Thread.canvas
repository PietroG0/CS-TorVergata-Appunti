{
	"nodes":[
		{"id":"4884e20741b92883","x":-90,"y":-80,"width":250,"height":60,"color":"#1100ff","type":"text","text":"Processi"},
		{"id":"09e5ddc2a64d7267","x":-205,"y":80,"width":480,"height":236,"color":"#1100ff","type":"text","text":"I processi sono il software che è in esecuzione o \"gira\" sul pc (compreso il SO). \nIl processo è un'istanza dell'esecuzione di un programma, inclusi i valori attuali del program counter, dello stack, dei registri e delle variabili.\nConcettualmente ogni processo ha la sua CPU virtuale; in realtà la CPU passa avanti e indietro da processo a processo"},
		{"id":"c4d68a3e226b309d","x":-540,"y":57,"width":335,"height":259,"color":"#1100ff","type":"text","text":"Chiusura di un processo\n- uscita normale (volontaria)\n- uscita su errore (volontaria), esempio bug nel programma\n- errore critico (involontario), run-time error\n- terminato da un altro processo (involontario), kill ()\n"},
		{"id":"98ef8ccbaa7a9349","x":275,"y":57,"width":356,"height":259,"color":"#1100ff","type":"text","text":"Creazione del Processo\nUn processo viene creato durante uno di questi eventi:\n- inizializzazione del sistema\n- esecuzione di una chiamata di sistema di creazione di un processo\n- richiesta dell'utente\n- inizio di un job in modalità batch"},
		{"id":"6c66675503f6cdd8","x":275,"y":360,"width":356,"height":286,"color":"#1100ff","type":"text","text":"All'avvio vengono in genere creati vari processi\n- i processi attivi che interagiscono con gli utenti e svolgono un compito per loro\n- i processo in background, non associati ad un utente in particolare, che svolgono funzioni specifiche all'arrivo di una richiesta (deamon)"},
		{"id":"5be5c5e7050fafcf","x":-100,"y":1206,"width":344,"height":313,"color":"#54d982","type":"text","text":"Il modello a thread classico\nUn processo può essere visto come un modo per raggruppare risorse relazionate, programma, dati, file aperti, processi figli.\nI thread invece sono entità schedulate per l'esecuzione, più thread possono essere eseguiti nello stesso ambiente di processo\nIl thread ha un program counter, alcuni registri, uno stack e uno stato"},
		{"id":"d13cfe2162833bae","x":-53,"y":1000,"width":250,"height":60,"color":"#54d982","type":"text","text":"Thread"},
		{"id":"8ed456298ec45980","x":300,"y":1206,"width":322,"height":233,"color":"#54d982","type":"text","text":"**Alcuni problemi presenti nei thread**\nI thread condividendo molte strutture dati, cosa accadrebbe se un thread chiude un file mentre un altro lo sta ancora leggendo?\nOccorre avere le idee chiare su come dovrebbero andare le cose"},
		{"id":"702f3fc52ba0f81b","x":-540,"y":1206,"width":399,"height":302,"color":"#54d982","type":"text","text":"i thread sono dei \"miniprocessi\", che a differenza dei processi, sono tra loro fortemente correlati poichè condividono spazio degli indirizzi e dati.\nSuddividendo una applicazione in molteplici thread sequenziali eseguiti quasi in parallelo, il modello di programmazione diventa più semplice. \nInoltre essendo più leggeri dei processi, sono più veloci da creare/cancellare"}
	],
	"edges":[
		{"id":"da973c2432dfcddb","fromNode":"4884e20741b92883","fromSide":"bottom","toNode":"09e5ddc2a64d7267","toSide":"top"},
		{"id":"3a24db859b4e088e","fromNode":"4884e20741b92883","fromSide":"bottom","toNode":"98ef8ccbaa7a9349","toSide":"top"},
		{"id":"51b2a7215e681fa7","fromNode":"98ef8ccbaa7a9349","fromSide":"bottom","toNode":"6c66675503f6cdd8","toSide":"top"},
		{"id":"b3a1a4a8c3178ab5","fromNode":"4884e20741b92883","fromSide":"bottom","toNode":"c4d68a3e226b309d","toSide":"top"},
		{"id":"f983cc0d4480f8ba","fromNode":"d13cfe2162833bae","fromSide":"bottom","toNode":"702f3fc52ba0f81b","toSide":"top"},
		{"id":"a11350562fc4f607","fromNode":"d13cfe2162833bae","fromSide":"bottom","toNode":"5be5c5e7050fafcf","toSide":"top"},
		{"id":"46e2e8f07b5236da","fromNode":"d13cfe2162833bae","fromSide":"bottom","toNode":"8ed456298ec45980","toSide":"top"}
	]
}