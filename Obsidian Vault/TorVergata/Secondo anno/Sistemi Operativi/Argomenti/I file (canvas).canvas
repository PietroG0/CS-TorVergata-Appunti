{
	"nodes":[
		{"id":"82cbc079dbb26bc1","x":-60,"y":-120,"width":125,"height":60,"type":"text","text":"File"},
		{"id":"9df2fbccb825003a","x":-474,"y":40,"width":477,"height":540,"type":"text","text":"Struttura dei file\n1) File come sequenza non strutturata di byte, il sistema operativo non sa cosa c'è dentro, vede solo una sequenza di byte. Questo concede la massima flessibilità agli utenti, che possono scriverci e chiamarlo come preferiscono.\n2) Nel secondo modello i file sono strutturati con una sequenza di  record di lunghezza fissa, ciscuno con una struttura interna. L'idea di un file composto con una sequenza di record è incentrata sul fatto che l'operazione di lettura restituisca un record e l'operazione di scrittura restituisca sovrascriva o aggiunga un record\n3) In questa organizzazione un file è composto da un albero di record, non necessariamente della stessa lunghezza, ognuno contenente un campo chiave in una posizione fissa del record. L'albero è ordinato sul campo chiave per permettere una ricerca rapida per una chiave particolare"},
		{"id":"6599c449b479e657","x":3,"y":40,"width":535,"height":640,"type":"text","text":"Implementazione dei file\n1) Allocazione contigua, memorizzare un file come una sequenza contigua di blocchi del disco. Questo tipo di allocazione ha 2 vantaggi, semplice da implementare poichè per tenere traccia dei blocchi di un file bastano due numeri: l'indirizzo su disco del primo blocco e il numero di blocchi del file. In secondo luogo, l'operazione di lettura è molto performante, anche sui disci megnetici, possibile con una sola operazione. Tuttavia presenta anche uno svantaggio, col passare del tempo si ha una frammentazione della memoria.\n2) Allocazione con liste concatenate, questo metodo configura ciascun file come una lista concatenata di blocchi del disco, la prima parte del blocco è un puntatore al prossimo file, la seconda parte del blocco è per i dati. Diversamente per l'allocazione contigua, non si presenta il problema della frammentazione del disco. Presenta 2 problemi, la quantità di spazio per i dati di un blocco non è più potenza di due, dato che il puntatore occupa alcuni byte, inoltre per leggere l'intera dimensione del blocco richiede l'acquisizione e la concatenazione di informazioni da due blocchi del disco\n3) Allocazione con liste concatenate con una tabella in memoria, entrambi gli svantaggi sono eliminati ponendo la parola puntatore di ogni blocco in una tabella in memoria, chiamata FAT ( FIle Allocation Table )"},
		{"id":"ac296b67e1460f0c","x":-500,"y":-462,"width":300,"height":260,"type":"text","text":"Tipi di file\n1) FIle normali, quelli contenenti informazioni dell'utente\n2) Le directory sono file di sistema usati per mantenere la struttura del file system\n3) I file speciali a blocchi sono usati per modellare i dischi"},
		{"id":"7db8bcc4f3b71e91","x":-197,"y":-520,"width":401,"height":318,"type":"text","text":"File mappati in memoria\nL'idea alla base è che un processo può avviare una chiamata di sistema per mappare un file all'interno di una porzione del suo spazio degli indirizzi virtuali.\nAl momento della mappatura non viene caricata alcuna pagina, ma appena le pagine vengono toccate, vengono paginate a richiesta. \nQuando il processo termina o elimina esplicitamente la mappatura, tutte le pagine modificate vengono riscritte sul file."},
		{"id":"a2e06bb97166d873","x":204,"y":-540,"width":377,"height":338,"type":"text","text":"Accesso ai file\n1) Accesso sequenziale, permetteva di poter leggere i file dall'inizio alla fine, senza saltare alcun byte nè leggerli in ordine sparso\n2) Accesso casuale, con la comparsa dei dischi per la memorizzazione dei file, si poteva leggere i byte o i record senza un ordine, o accedere ai record attraverso la chiave anzichè attraverso la posizione"}
	],
	"edges":[
		{"id":"2968341774b03d59","fromNode":"82cbc079dbb26bc1","fromSide":"bottom","toNode":"9df2fbccb825003a","toSide":"top"},
		{"id":"545b4c24a88fecf0","fromNode":"82cbc079dbb26bc1","fromSide":"top","toNode":"ac296b67e1460f0c","toSide":"bottom"},
		{"id":"dcbd21e9cc352b2b","fromNode":"82cbc079dbb26bc1","fromSide":"bottom","toNode":"6599c449b479e657","toSide":"top"},
		{"id":"72bc7515604e7cb7","fromNode":"82cbc079dbb26bc1","fromSide":"top","toNode":"a2e06bb97166d873","toSide":"bottom"},
		{"id":"5b071ab33f901e2a","fromNode":"82cbc079dbb26bc1","fromSide":"top","toNode":"7db8bcc4f3b71e91","toSide":"bottom"}
	]
}