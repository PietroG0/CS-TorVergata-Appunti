{
	"nodes":[
		{
			"id":"33990a7f1b8d6ac5",
			"type":"text",
			"text":"Metriche di Struttura",
			"styleAttributes":{"textAlign":"center"},
			"x":-120,
			"y":-100,
			"width":240,
			"height":60,
			"color":"4"
		},
		{
			"id":"19c52d2192102bfe",
			"type":"text",
			"text":"Misure nate per determinare **quanto un software sia \"buono\"**, ovvero misurano la qualità stessa del software",
			"styleAttributes":{"textAlign":"center"},
			"x":-155,
			"y":100,
			"width":310,
			"height":140,
			"color":"4"
		},
		{
			"id":"7638615a40bbea7c",
			"type":"text",
			"text":"Moduli\nUn modulo è una sequenza contigua di statements del programma",
			"styleAttributes":{"textAlign":"center"},
			"x":-520,
			"y":-140,
			"width":260,
			"height":140,
			"color":"4"
		},
		{
			"id":"1f5d13afed2cb644",
			"type":"text",
			"text":"Architettura dei moduli\nCi troviamo nella situazione in cui il SW viene diviso in moduli, di conseguenza abbiamo la così detta **architettura dei moduli (structured chart)**.\n\nSi rappresenta come un albero diretto $S = \\{N, R\\}$, dove:\n- ogni nodo $n \\in N$ corrisponde a un modulo\n- ogni arco $r \\in R$ indica le relazioni",
			"styleAttributes":{"textAlign":"center"},
			"x":-590,
			"y":240,
			"width":400,
			"height":340,
			"color":"1"
		},
		{
			"id":"11d54c84ca33d9bb",
			"type":"text",
			"text":"Tree Impurity\nLa Tree Impurity $m(G)$ misura quanto il grafo $G$ è differente da essere un albero. \n\n**Più piccolo è questo valore, migliore è il design**\n",
			"styleAttributes":{"textAlign":"center"},
			"x":0,
			"y":305,
			"width":340,
			"height":210,
			"color":"1"
		},
		{
			"id":"d45d91869e85cf2a",
			"type":"text",
			"text":"Riuso interno (Misura di Yin e Winchester)\nE' una misura che indica il grado di riutilizzo dei moduli all'interno dello stesso prodotto.\n\n**Più piccolo è il valore $r(G)$ meno è il riutilizzo**",
			"styleAttributes":{"textAlign":"center"},
			"x":0,
			"y":580,
			"width":400,
			"height":200,
			"color":"1"
		},
		{
			"id":"2c6900de703db148",
			"type":"text",
			"text":"Information Flow\nLe misure di Information Flow assumono che la complessità di un modulo dipende da 2 fattori\n- La complessità del codice del modulo\n- La complessità delle interfacce del modulo\n\n",
			"styleAttributes":{"textAlign":"center"},
			"x":-360,
			"y":760,
			"width":340,
			"height":240,
			"color":"1"
		},
		{
			"id":"ab79e18e16493571",
			"type":"text",
			"text":"Fan-In e Fan-Out\n- Fan-In: di un modulo $M$ è il numero di flussi locali (diretti+indiretti) che terminano su $M$ più il numero di flussi globali le cui informazioni sono prelevate da $M$\n- Fan-Out: di un modulo $M$ è il numero di flussi locali (diretti+indiretti) che iniziano da $M$ più il numero di flussi globali aggiornati da $M$",
			"styleAttributes":{"textAlign":"center"},
			"x":-780,
			"y":760,
			"width":380,
			"height":320,
			"color":"1"
		},
		{
			"id":"4aa0cff3577c60e8",
			"type":"text",
			"text":"Flowgraph\nUn flowgraph è una rappresentazione grafica del comportamento di un programma. In un flowgraph:\n- **Nodi** rappresentano basic block, cioè sequenze di istruzioni senza salti nè punti di ingresso/uscita intermedi\n- **Arch** indicano i possibili salti di controllo da un blocco ad un altro",
			"styleAttributes":{"textAlign":"center"},
			"x":-1220,
			"y":90,
			"width":340,
			"height":300,
			"color":"6"
		},
		{
			"id":"3de184ff93595603",
			"type":"text",
			"text":"Sequencing\nIl sequencing è il costrutto più elementare, consiste **nell'esecuzione di istruzioni una dopo l'altra**, nell'ordine in cui sono state scritte",
			"styleAttributes":{"textAlign":"center"},
			"x":-1010,
			"y":-280,
			"width":260,
			"height":220,
			"color":"6"
		},
		{
			"id":"a88ae90d933dac7a",
			"type":"text",
			"text":"Nesting\nIl nesting indica la **presenza di costrutti di controllo uno dentro l'altro**, come, per esempio, if dentro while.\nL'annidamento è utile per organizzare logiche complesse",
			"styleAttributes":{"textAlign":"center"},
			"x":-1350,
			"y":-280,
			"width":260,
			"height":220,
			"color":"6"
		},
		{
			"id":"a7fe894b281d9b37",
			"type":"text",
			"text":"Depth of Nesting\nLa depth of nesting **misura quanto \"in profondità\" si incrociano i costrutti di controllo** all'interno di un programma",
			"styleAttributes":{"textAlign":"center"},
			"x":-1700,
			"y":-270,
			"width":260,
			"height":200,
			"color":"2"
		},
		{
			"id":"5f42aa0b22707cee",
			"type":"text",
			"text":"D-Structuredness\nIl termine D-Structuredness è una metrica che valuta quanto un grafo di controllo del flusso sia composto da blocchi \"ben strutturati\"",
			"styleAttributes":{"textAlign":"center"},
			"x":-550,
			"y":-310,
			"width":320,
			"height":140,
			"color":"3"
		},
		{
			"id":"f346edb461525965",
			"type":"text",
			"text":"Complessità ciclomatica\nLa complessità di un programma può essere misurata dal numero **ciclomatico** del flowgraph del programma\n\nSi può calcolare in due modi diversi:\n- Flowgraph-Based\n- Code-Based\n\nIn sintesi, la complessità ciclomatica fornisce un valore numerico che aiuta a **quantificare quanto un pezzo di codice sia \"ramificato\"** e quindi quanto lavoro di testing e comprensione richiede",
			"styleAttributes":{"textAlign":"center"},
			"x":-1300,
			"y":500,
			"width":420,
			"height":420,
			"color":"1"
		}
	],
	"edges":[
		{
			"id":"39d7928c11cf3bec",
			"styleAttributes":{},
			"toFloating":false,
			"fromFloating":false,
			"fromNode":"33990a7f1b8d6ac5",
			"fromSide":"bottom",
			"toNode":"19c52d2192102bfe",
			"toSide":"top",
			"label":"Definizione"
		},
		{
			"id":"f1acfe9b78934d52",
			"styleAttributes":{},
			"toFloating":false,
			"fromNode":"33990a7f1b8d6ac5",
			"fromSide":"left",
			"toNode":"7638615a40bbea7c",
			"toSide":"right"
		},
		{
			"id":"2b1d1259ebb53c53",
			"styleAttributes":{},
			"toFloating":false,
			"fromNode":"7638615a40bbea7c",
			"fromSide":"bottom",
			"toNode":"1f5d13afed2cb644",
			"toSide":"top"
		},
		{
			"id":"352a4b122f88f37c",
			"styleAttributes":{"pathfindingMethod":"square"},
			"toFloating":false,
			"fromNode":"1f5d13afed2cb644",
			"fromSide":"right",
			"toNode":"11d54c84ca33d9bb",
			"toSide":"left"
		},
		{
			"id":"fba42c9c0e3a3f49",
			"styleAttributes":{"pathfindingMethod":"square"},
			"toFloating":false,
			"fromNode":"1f5d13afed2cb644",
			"fromSide":"right",
			"toNode":"d45d91869e85cf2a",
			"toSide":"left"
		},
		{
			"id":"fdd327ace1ad4cf2",
			"styleAttributes":{"pathfindingMethod":"square"},
			"toFloating":false,
			"fromFloating":false,
			"fromNode":"1f5d13afed2cb644",
			"fromSide":"bottom",
			"toNode":"2c6900de703db148",
			"toSide":"top"
		},
		{
			"id":"c21fe8183aa9ef40",
			"styleAttributes":{"pathfindingMethod":"square"},
			"toFloating":false,
			"fromFloating":false,
			"fromNode":"1f5d13afed2cb644",
			"fromSide":"bottom",
			"toNode":"ab79e18e16493571",
			"toSide":"top"
		},
		{
			"id":"c3e46c041aa0986d",
			"styleAttributes":{"pathfindingMethod":"square"},
			"toFloating":false,
			"fromFloating":false,
			"fromNode":"1f5d13afed2cb644",
			"fromSide":"left",
			"toNode":"f346edb461525965",
			"toSide":"right"
		},
		{
			"id":"c84479ea0553e974",
			"styleAttributes":{"pathfindingMethod":"square"},
			"toFloating":false,
			"fromNode":"1f5d13afed2cb644",
			"fromSide":"left",
			"toNode":"4aa0cff3577c60e8",
			"toSide":"right"
		},
		{
			"id":"edc07c59eb78c6f2",
			"styleAttributes":{"pathfindingMethod":"square"},
			"toFloating":false,
			"fromNode":"4aa0cff3577c60e8",
			"fromSide":"top",
			"toNode":"3de184ff93595603",
			"toSide":"bottom"
		},
		{
			"id":"3ac3f896c5150f14",
			"styleAttributes":{"pathfindingMethod":"square"},
			"toFloating":false,
			"fromFloating":false,
			"fromNode":"4aa0cff3577c60e8",
			"fromSide":"top",
			"toNode":"a88ae90d933dac7a",
			"toSide":"bottom"
		},
		{
			"id":"5f1b27f9c79395dc",
			"styleAttributes":{},
			"toFloating":false,
			"fromNode":"a88ae90d933dac7a",
			"fromSide":"left",
			"toNode":"a7fe894b281d9b37",
			"toSide":"right"
		},
		{
			"id":"e01aeee1d2ea5868",
			"styleAttributes":{"pathfindingMethod":"square"},
			"toFloating":false,
			"fromNode":"3de184ff93595603",
			"fromSide":"right",
			"toNode":"5f42aa0b22707cee",
			"toSide":"left"
		}
	],
	"metadata":{
		"version":"1.0-1.0",
		"frontmatter":{}
	}
}